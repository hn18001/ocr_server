#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ocr_result:
  """
  Attributes:
   - result
   - roi_left
   - roi_top
   - roi_width
   - roi_height
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'result', None, None, ), # 1
    (2, TType.I32, 'roi_left', None, None, ), # 2
    (3, TType.I32, 'roi_top', None, None, ), # 3
    (4, TType.I32, 'roi_width', None, None, ), # 4
    (5, TType.I32, 'roi_height', None, None, ), # 5
  )

  def __init__(self, result=None, roi_left=None, roi_top=None, roi_width=None, roi_height=None,):
    self.result = result
    self.roi_left = roi_left
    self.roi_top = roi_top
    self.roi_width = roi_width
    self.roi_height = roi_height

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.result = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.roi_left = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.roi_top = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.roi_width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.roi_height = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ocr_result')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRING, 1)
      oprot.writeString(self.result)
      oprot.writeFieldEnd()
    if self.roi_left is not None:
      oprot.writeFieldBegin('roi_left', TType.I32, 2)
      oprot.writeI32(self.roi_left)
      oprot.writeFieldEnd()
    if self.roi_top is not None:
      oprot.writeFieldBegin('roi_top', TType.I32, 3)
      oprot.writeI32(self.roi_top)
      oprot.writeFieldEnd()
    if self.roi_width is not None:
      oprot.writeFieldBegin('roi_width', TType.I32, 4)
      oprot.writeI32(self.roi_width)
      oprot.writeFieldEnd()
    if self.roi_height is not None:
      oprot.writeFieldBegin('roi_height', TType.I32, 5)
      oprot.writeI32(self.roi_height)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
